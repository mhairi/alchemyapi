{
    "collab_server" : "",
    "contents" : "# Define our own paste operator\n`%+%` <- function(x, y) paste0(x, y)\n\n#' Get keywords from Alchemy API\n#'\n#' @param url URL to extract the keywords from\n#' @param api_key\n#'\n#' @return Dataframe with a row for each word, the corrisponding score\n#' and the origional url\n#' @export\n#'\n#' @examples\\dontrun{\n#' get_keywords('google.com', '1234')\n#' }\nget_keywords <- function(url, api_key){\n  get_url <-\n    'http://gateway-a.watsonplatform.net/calls/url/URLGetRankedKeywords?' %+%\n    '&url=' %+% url %+%\n    '&apikey=' %+% api_key %+%\n    '&outputMode=json'\n\n  response <- httr::GET(get_url)\n\n  httr::stop_for_status(response)\n\n  output <- httr::content(response, as = 'text', encoding = 'UTF-8')\n  output <- jsonlite::fromJSON(output)\n\n  df <- output$keywords\n\n  df$relevance <- as.numeric(df$relevance)\n  df$url       <- url\n\n  return(df)\n}\n\n#' Get concepts from Alchemy API\n#'\n#' @param url URL to extract the concepts from\n#' @param api_key\n#'\n#' @return Dataframe with a concept for each word, the corrisponding score\n#' and the origional url\n#' @export\n#'\n#' @examples\\dontrun{\n#' get_concepts('google.com', '1234')\n#' }\nget_concepts <- function(url, api_key){\n  get_url <-\n    'http://gateway-a.watsonplatform.net/calls/url/URLGetRankedConcepts?' %+%\n    '&url=' %+% url %+%\n    '&apikey=' %+% api_key  %+%\n    '&outputMode=json'\n\n  response <- httr::GET(get_url)\n\n  httr::stop_for_status(response)\n\n  output <- httr::content(response, as = 'text', encoding = 'UTF-8')\n  output <- jsonlite::fromJSON(output)\n\n  df <- output$concepts\n\n  df$relevance <- as.numeric(df$relevance)\n  df$url  <- url\n\n  return(df)\n}\n\n#' Get raw text of a URL\n#'\n#' @param url URL to extract the text from\n#' @param api_key\n#'\n#' @return One element vector with page's text\n#' @export\n#'\n#' @examples\\dontrun{\n#' get_text('google.com', '1234')\n#' }\n#'\nget_text <- function(url, api_key){\n  get_url <-\n    'http://gateway-a.watsonplatform.net/calls/url/URLGetText?' %+%\n    '&url=' %+% url %+%\n    '&apikey=' %+% api_key %+%\n    '&outputMode=json'\n\n  response <- httr::GET(get_url)\n\n  httr::stop_for_status(response)\n\n  output <- httr::content(response, as = 'text', encoding = 'UTF-8')\n  output <- jsonlite::fromJSON(output)\n\n  return(output$text)\n}\n\n#' Get emotions from Alchemy API\n#'\n#' @param url URL to extract the emotions from\n#' @param api_key\n#'\n#' @return Dataframe with a row for each emotion, the score for that emotion\n#' And the origional URL.\n#' @export\n#'\n#' @examples\\dontrun{\n#' get_emotions('google.com', '1234')\n#' }\nget_emotions <- function(url, api_key){\n  get_url <-\n    'http://gateway-a.watsonplatform.net/calls/url/URLGetEmotion?' %+%\n    '&url=' %+% url %+%\n    '&apikey=' %+% api_key %+%\n    '&outputMode=json'\n\n  response <- httr::GET(get_url)\n\n  httr::stop_for_status(response)\n\n  output <- httr::content(response, as = 'text', encoding = 'UTF-8')\n  output <- jsonlite::fromJSON(output)\n\n  return_df <- output$docEmotions\n  return_df <- as.data.frame(lapply(return_df, as.numeric))\n\n  df <- tidyr::gather(return_df, emotion, score)\n  df$url <- url\n\n  return(df)\n}\n\n\n#' Get sentiment from Alchemy API\n#'\n#' @param url URL to extract sentiment from\n#' @param api_key\n#'\n#' @return Dataframe with a row for each emotion, the score for that emotion\n#' And the origional URL.\n#' @export\n#'\n#' @examples\\dontrun{\n#' get_sentiment('google.com', '1234')\n#' }\nget_sentiment <- function(url, api_key){\n  get_url <-\n    'http://gateway-a.watsonplatform.net/calls/url/URLGetTextSentiment?' %+%\n    '&url=' %+% url %+%\n    '&apikey=' %+% api_key %+%\n    '&outputMode=json'\n\n  response <- httr::GET(get_url)\n\n  httr::stop_for_status(response)\n\n  output <- httr::content(response, as = 'text', encoding = 'UTF-8')\n  output <- jsonlite::fromJSON(output)\n\n  return(as.numeric(output$docSentiment$score))\n}\n\n",
    "created" : 1470577417984.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "413849926",
    "id" : "9B00B80E",
    "lastKnownWriteTime" : 1470584696,
    "last_content_update" : 1470584696463,
    "path" : "~/Documents/APIs/alchemyapi/R/functions.R",
    "project_path" : "R/functions.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}